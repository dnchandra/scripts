// Catchpoint Puppeteer Script for Mercury Portal Login
// Uses Catchpoint credential store: MercuryCatchpoint
// Robust dynamic handling of login + cookies + verification + screenshot

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

Catchpoint.startStep('Navigate to Login Page');
await page.goto('https://markets-pp.ml.com', { waitUntil: 'domcontentloaded', timeout: 60000 });
await sleep(2000);
console.log('Initial URL:', page.url());

// Detect redirect if any
let finalUrl = page.url();
const detectUntil = Date.now() + 10000;
while (Date.now() < detectUntil) {
  const cur = page.url();
  if (cur !== finalUrl) {
    console.log('Redirect detected:', finalUrl, '→', cur);
    finalUrl = cur;
  }
  if (cur.indexOf('fedsso') > -1 || (await page.$('input[placeholder="Enter your user ID"]'))) break;
  await sleep(300);
}
console.log('Final observed URL:', finalUrl);

// STEP 2 — Accept Cookies (if popup appears)
Catchpoint.startStep('Accept Cookies');
async function safeClick(el) {
  try {
    await el.click();
    return true;
  } catch (e) {
    try {
      await el.evaluate((n) => n && n.click());
      return true;
    } catch {
      return false;
    }
  }
}

async function acceptCookies() {
  const selectors = [
    '#onetrust-accept-btn-handler',
    'button[id*="onetrust"]',
    'button:has-text("Accept")',
    'button:has-text("Agree")'
  ];
  for (const s of selectors) {
    const el = await page.$(s);
    if (el) {
      const clicked = await safeClick(el);
      if (clicked) {
        console.log('Cookie popup handled:', s);
        return true;
      }
    }
  }
  console.log('No cookie popup found.');
  return false;
}
await acceptCookies();

// STEP 3 — Wait for login inputs
Catchpoint.startStep('Wait for Login Inputs');
const usernameSelectors = [
  'input[placeholder="Enter your user ID"]',
  'input[name="username"]',
  'input[id*="user"]',
  'input[type="text"]'
];
const passwordSelectors = [
  'input[placeholder="Enter your password"]',
  'input[name="password"]',
  'input[id*="pass"]',
  'input[type="password"]'
];

async function findVisible(selectors) {
  for (const s of selectors) {
    const el = await page.$(s);
    if (el) {
      const box = await el.boundingBox();
      if (box && box.width > 0 && box.height > 0) return { el, sel: s };
    }
  }
  return null;
}

let foundUser = null, foundPass = null;
const waitUntil = Date.now() + 20000;
while (Date.now() < waitUntil) {
  if (!foundUser) foundUser = await findVisible(usernameSelectors);
  if (!foundPass) foundPass = await findVisible(passwordSelectors);
  if (foundUser && foundPass) break;
  await sleep(300);
}

if (!foundUser || !foundPass) {
  console.error('Login inputs not found.');
  await page.screenshot({ path: 'login_inputs_missing.png', fullPage: true });
  throw new Error('Login form not found');
}
console.log('Found login inputs:', foundUser.sel, foundPass.sel);

// STEP 4 — Retrieve credentials
Catchpoint.startStep('Retrieve Credentials');
const username = Catchpoint.username('MercuryCatchpoint');
const password = Catchpoint.password('MercuryCatchpoint');

// STEP 5 — Enter credentials
Catchpoint.startStep('Enter Credentials');
await foundUser.el.click({ clickCount: 3 });
await foundUser.el.type(username, { delay: 50 });
await foundPass.el.click({ clickCount: 3 });
await foundPass.el.type(password, { delay: 50 });

// STEP 6 — Click Login
Catchpoint.startStep('Click Login');
const loginSelectors = [
  'button[type="submit"]',
  'button[name="login"]',
  'button[id*="login"]',
  'button[class*="login"]',
  'input[type="submit"]'
];

let loginButton = null;
for (const s of loginSelectors) {
  const el = await page.$(s);
  if (el) {
    const box = await el.boundingBox();
    if (box && box.width > 0 && box.height > 0) {
      loginButton = el;
      console.log('Login button found:', s);
      break;
    }
  }
}

if (loginButton) {
  await loginButton.evaluate((el) => el.scrollIntoView({ block: 'center' })).catch(() => {});
  const clicked = await safeClick(loginButton);
  if (!clicked) {
    console.warn('Click failed, using Enter key.');
    await foundPass.el.press('Enter');
  }
} else {
  console.warn('Login button not found, pressing Enter fallback.');
  await foundPass.el.press('Enter');
}

// STEP 7 — Verify Login Success
Catchpoint.startStep('Verify Login');
let success = false;
try {
  await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 20000 });
  success = true;
} catch {
  // fallback polling for home element or URL change
  const endPoll = Date.now() + 30000;
  while (Date.now() < endPoll && !success) {
    const quick = await page.$('div.quick-access, [data-testid="home"], nav[role="navigation"]');
    if (quick) {
      success = true;
      console.log('Detected post-login element.');
      break;
    }
    const cur = page.url();
    if (!cur.includes('login_page') && !cur.includes('resume')) {
      success = true;
      console.log('URL changed away from login page:', cur);
      break;
    }
    await sleep(500);
  }
}

const shotName = success ? `login_success_${Date.now()}.png` : `login_failure_${Date.now()}.png`;
await page.screenshot({ path: shotName, fullPage: true });
console.log('Saved screenshot:', shotName);

if (!success) {
  console.error('Login not confirmed; check screenshot.');
  throw new Error('Login verification failed');
}

console.log('✅ Login successful, home page reached.');
