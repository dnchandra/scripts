import React, { useMemo, useState } from "react";
import IISAdvancedPopup from "./IISAdvancedPopup";
import { exportToExcel } from "../utils/exportToExcel";
import { ErrorBanner, getUserFriendlyError } from "./ErrorDisplay";

// Helper to group data by AppID and Server with improved error handling
function groupByAppIdServer(data, serverErrors) {
  const grouped = {};
  
  // Process successful data first
  for (const row of data) {
    const appId = row._appId;
    const server = row._server;
    if (!appId || !server) continue;
    
    if (!grouped[appId]) grouped[appId] = {};
    if (!grouped[appId][server]) {
      grouped[appId][server] = { 
        rows: [], 
        error: null, 
        success: true 
      };
    }
    grouped[appId][server].rows.push(row);
  }
  
  // Add error information for failed servers
  for (const err of serverErrors || []) {
    const appId = err.appId;
    const serverName = err.serverName || err.server;
    if (!appId || !serverName) continue;
    
    if (!grouped[appId]) grouped[appId] = {};
    if (!grouped[appId][serverName]) {
      grouped[appId][serverName] = { 
        rows: [], 
        error: null, 
        success: false 
      };
    }
    
    grouped[appId][serverName].error = err.stderr || err.message;
    grouped[appId][serverName].success = false;
  // Preserve additional debug/partial-result information if present
  if (err.rawOutput) grouped[appId][serverName].rawOutput = err.rawOutput;
  if (err.RawOutput) grouped[appId][serverName].rawOutput = grouped[appId][serverName].rawOutput || err.RawOutput;
  if (err.raw_stdout_b64) grouped[appId][serverName].rawOutput = grouped[appId][serverName].rawOutput || err.raw_stdout_b64;
  if (err.minorFailure) grouped[appId][serverName].minorFailure = true;
  if (err.debugAttempts) grouped[appId][serverName].debugAttempts = err.debugAttempts;
  if (err.successAttempt || err.successAttempt === 0) grouped[appId][serverName].successAttempt = err.successAttempt;
  }
  
  return grouped;
}

// Helper to format IIS state with colors and icons
function formatState(state) {
  if (!state) return <span className="text-gray-400 italic">Unknown</span>;
  
  const stateStr = String(state).toLowerCase();
  
  if (stateStr === "started" || stateStr === "running") {
    return (
      <span className="flex items-center gap-1 text-green-700 font-semibold">
        <span className="text-green-500">‚óè</span>
        <span>Started</span>
      </span>
    );
  } else if (stateStr === "stopped") {
    return (
      <span className="flex items-center gap-1 text-red-700 font-semibold">
        <span className="text-red-500">‚óè</span>
        <span>Stopped</span>
      </span>
    );
  } else {
    return (
      <span className="flex items-center gap-1 text-yellow-700 font-semibold">
        <span className="text-yellow-500">‚óè</span>
        <span>{state}</span>
      </span>
    );
  }
}


export default function IISInfoTable({ data = [], type = "websites", serverErrors = [], showNoResults = false, onError, onRetryErrors }) {
  const [popupData, setPopupData] = useState(null);
  const [textQuery, setTextQuery] = useState("");
  const [sortBy, setSortBy] = useState("Name");
  const [sortDir, setSortDir] = useState("asc");

  // Define fields based on type
  const fields = type === "websites" 
    ? ["Name", "State", "PhysicalPath", "ApplicationPool", "Bindings"]
    : ["Name", "State", "CLRVersion", "PipelineMode"];

  // Group data by AppID/server
  const grouped = useMemo(() => groupByAppIdServer(data, serverErrors), [data, serverErrors]);
  
  // Extract errors for the ErrorBanner component
  const errors = useMemo(() => {
    const errorList = [];
    Object.entries(grouped).forEach(([appId, servers]) => {
      Object.entries(servers).forEach(([serverName, serverData]) => {
        if (!serverData.success) {
          errorList.push({
            appId,
            server: serverName,
            stderr: serverData.error
          });
        }
      });
    });
    return errorList;
  }, [grouped]);
  
  const allAppIds = Object.keys(grouped);
  const allServers = useMemo(() => {
    const out = new Set();
    allAppIds.forEach((appId) => Object.keys(grouped[appId] || {}).forEach((s) => out.add(s)));
    return Array.from(out);
  }, [grouped, allAppIds.join(",")]);

  const visibleGrouped = useMemo(() => {
    const g = {};
    for (const appId of allAppIds) {
      if (!grouped[appId]) continue;
      g[appId] = {};
      for (const server of Object.keys(grouped[appId])) {
        if (!grouped[appId][server]) continue;
        // Filter rows by text query
        const serverData = grouped[appId][server];
        const filteredRows = (serverData.rows || []).filter((row) => {
          if (!textQuery) return true;
          const q = textQuery.toLowerCase();
          return fields
            .map((f) => String(row?.[f] ?? "").toLowerCase())
            .some((s) => s.includes(q)) ||
            appId.toLowerCase().includes(q) ||
            server.toLowerCase().includes(q);
        });
        
        if (filteredRows.length > 0 || serverData.error) {
          g[appId][server] = {
            ...serverData,
            rows: filteredRows
          };
        }
      }
      // Remove empty appIds
      if (Object.keys(g[appId]).length === 0) {
        delete g[appId];
      }
    }
    return g;
  }, [grouped, textQuery, fields.join(","), allAppIds.join(",")]);

  const handleExport = () => {
    const rows = [];
    for (const appId of Object.keys(visibleGrouped)) {
      for (const server of Object.keys(visibleGrouped[appId] || {})) {
        const list = visibleGrouped[appId][server]?.rows || [];
        const sorted = [...list].sort((a, b) => {
          const av = String(a?.[sortBy] ?? "").toLowerCase();
          const bv = String(b?.[sortBy] ?? "").toLowerCase();
          if (av < bv) return sortDir === "asc" ? -1 : 1;
          if (av > bv) return sortDir === "asc" ? 1 : -1;
          return 0;
        });
        for (const row of sorted) {
          // Start with AppID and Server, then include ALL fields from the row
          const out = { AppID: appId, Server: server };
          
          // Get all keys from the row (including Advanced and any other fields)
          Object.keys(row).forEach((key) => {
            // Skip internal fields that start with underscore
            if (key.startsWith('_')) return;
            
            const value = row[key];
            if (Array.isArray(value)) {
              out[key] = value.map(item => 
                typeof item === "object" ? JSON.stringify(item) : String(item)
              ).join("; ");
            } else if (typeof value === "object" && value !== null) {
              // Don't JSON.stringify objects - let exportToExcel flatten them
              out[key] = value;
            } else {
              out[key] = value ?? "";
            }
          });
          
          rows.push(out);
        }
      }
    }
    if (rows.length > 0) {
      exportToExcel(rows, type === "websites" ? "iis_websites" : "iis_apppools");
    } else {
      if (window.alert) {
        window.alert("No data to export. Please check your search filters.");
      }
    }
  };

  if (allAppIds.length === 0 && showNoResults) {
    return (
      <div className="bg-gradient-to-br from-white to-gray-50 p-12 rounded-2xl shadow-2xl mb-8 border border-gray-100 text-center">
        <div className="text-gray-400 text-8xl mb-6">üîç</div>
        <div className="text-gray-600 text-xl font-semibold mb-2">No Results Found</div>
        <div className="text-gray-500">Try adjusting your search criteria or check your server connections.</div>
      </div>
    );
  }

  return (
    <div className="bg-gradient-to-br from-white to-gray-50 p-6 rounded-2xl shadow-2xl mb-6 border border-gray-100">
      <div className="mb-4">
        {(allAppIds.length > 0 || showNoResults) && (
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl shadow-lg">
              <span className="text-white text-xl">{type === "websites" ? "üåê" : "üîß"}</span>
            </div>
            <div>
              <h2 className="text-xl font-bold bg-gradient-to-r from-blue-700 to-blue-900 bg-clip-text text-transparent">
                IIS {type === "websites" ? "Websites" : "Application Pools"}
              </h2>
              <p className="text-gray-600 text-xs">
                {Object.keys(visibleGrouped).length} app{Object.keys(visibleGrouped).length !== 1 ? 's' : ''} ‚Ä¢ {Object.values(visibleGrouped).reduce((acc, servers) => acc + Object.keys(servers).length, 0)} server{Object.values(visibleGrouped).reduce((acc, servers) => acc + Object.keys(servers).length, 0) !== 1 ? 's' : ''}
              </p>
            </div>
          </div>
        )}
      </div>

      {/* Enhanced Error Display */}
      <ErrorBanner 
        errors={errors}
        onRetry={onRetryErrors}
      />

      <div className="flex flex-col sm:flex-row justify-between items-center gap-4 mb-4">
        <div className="relative flex-1 max-w-md">
          <input
            type="text"
            value={textQuery}
            onChange={(e) => setTextQuery(e.target.value)}
            placeholder={`üîç Search ${type}, apps, servers, or any field...`}
            className="w-full border-2 border-gray-200 rounded-xl px-3 py-2 text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-200 bg-white shadow-sm"
          />
        </div>
        <button
          className="px-4 py-2 rounded-xl bg-gradient-to-r from-green-500 to-green-600 text-white font-semibold shadow-lg hover:shadow-xl hover:from-green-600 hover:to-green-700 transition-all duration-200 transform hover:scale-105 text-sm flex items-center gap-2"
          onClick={handleExport}
          type="button"
        >
          <span>üìä</span>
          Export to Excel
        </button>
      </div>

      {/* Render grouped + sortable */}
      <div className="w-full">
        {Object.keys(visibleGrouped).map((appId) => (
          <div key={appId} className="mb-8">
            {Object.keys(visibleGrouped[appId] || {}).map((server) => {
              const serverData = visibleGrouped[appId][server] || { rows: [], error: null, success: true };
              const { rows, error, success } = serverData;

              return (
                <div key={server} className="mb-6 bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden hover:shadow-xl transition-all duration-300">
                  <div className="px-6 py-3 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="p-1.5 bg-blue-100 rounded-lg">
                          <span className="text-blue-600 font-semibold text-xs">üì±</span>
                        </div>
                        <div>
                          <div className="font-bold text-blue-800 text-base">AppID: {appId}</div>
                          <div className="text-blue-600 text-xs">Server: {server}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-xs text-gray-500">
                          {success ? `${rows.length} ${type === "websites" ? "website" : "app pool"}${rows.length !== 1 ? 's' : ''}` : 'Error'}
                        </div>
                      </div>
                    </div>
                  </div>
                  {!success ? (
                    <div className="p-6 text-center">
                      <div className="text-red-500 text-4xl mb-3">‚ö†Ô∏è</div>
                      <div className="text-red-600 font-semibold mb-2">Connection Error</div>
                      <div className="text-gray-600 text-sm bg-red-50 p-3 rounded-lg border border-red-200">
                        {getUserFriendlyError(error)}
                      </div>
                    </div>
                  ) : rows.length > 0 ? (
                    <>
                      <div className="p-4">
                        {/* Non-blocking minor failure banner when rows exist but stderr was present */}
                        {serverData.minorFailure && (
                          <div className="mb-3 bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-sm text-yellow-800">
                            ‚ö†Ô∏è Partial results returned with warnings. Click "View Raw" for details.
                            <button
                              className="ml-3 text-yellow-700 underline"
                              onClick={() => {
                                const payload = {
                                  RawOutput: serverData.rawOutput || serverData.RawOutput || null,
                                  debugAttempts: serverData.debugAttempts || null,
                                  successAttempt: serverData.successAttempt || null,
                                };
                                setPopupData({ Raw: payload });
                              }}
                            >
                              View Raw
                            </button>
                          </div>
                        )}
                        {/* Web.config issue alert if any row indicates a site-level config read problem */}
                        {rows.some(r => r.WebConfigIssue || (r.Advanced && r.Advanced.WebConfigStatus && String(r.Advanced.WebConfigStatus).toLowerCase().startsWith("partial"))) && (
                          <div className="mb-3 bg-amber-50 border border-amber-200 rounded-lg p-3 text-sm text-amber-800">
                            ‚ö†Ô∏è Some site configuration sections could not be read due to web.config errors. Displaying available details only.
                            <button
                              className="ml-3 text-amber-700 underline"
                              onClick={() => {
                                const problems = rows
                                  .filter(r => r.WebConfigIssue || (r.Advanced && r.Advanced.WebConfigErrors))
                                  .map(r => ({ Name: r.Name, Errors: (r.Advanced && r.Advanced.WebConfigErrors) || (r.WebConfigError ? [r.WebConfigError] : []) }));
                                setPopupData({ WebConfigIssues: problems });
                              }}
                            >
                              View Details
                            </button>
                          </div>
                        )}
                      </div>
                      <div className="overflow-x-auto">
                      <table className="min-w-full text-sm">
                        <thead>
                          <tr className="bg-gradient-to-r from-gray-50 to-gray-100 select-none">
                            {fields.map((field) => (
                              <th
                                key={field}
                                className="px-4 py-2 text-left cursor-pointer font-semibold text-gray-700 hover:bg-gray-200 transition-colors duration-200 border-b border-gray-200 text-xs"
                                onClick={() => {
                                  setSortBy(field);
                                  setSortDir((d) => (field === sortBy ? (d === "asc" ? "desc" : "asc") : "asc"));
                                }}
                              >
                                <div className="flex items-center gap-1">
                                  {field}
                                  {sortBy === field && (
                                    <span className="text-blue-600 font-bold text-xs">
                                      {sortDir === "asc" ? "‚Üë" : "‚Üì"}
                                    </span>
                                  )}
                                </div>
                              </th>
                            ))}
                            <th className="px-4 py-2 text-left font-semibold text-gray-700 border-b border-gray-200 text-xs">Advanced</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-100">
                          {[...rows]
                            .filter((row) => {
                              if (!textQuery) return true;
                              const q = textQuery.toLowerCase();
                              return fields
                                .map((f) => String(row?.[f] ?? "").toLowerCase())
                                .some((s) => s.includes(q));
                            })
                            .sort((a, b) => {
                              const av = String(a?.[sortBy] ?? "").toLowerCase();
                              const bv = String(b?.[sortBy] ?? "").toLowerCase();
                              if (av < bv) return sortDir === "asc" ? -1 : 1;
                              if (av > bv) return sortDir === "asc" ? 1 : -1;
                              return 0;
                            })
                            .map((row, idx) => {
                              const key = [row.Name || "", row.State || "", row.Id || "", idx].join("|");
                              return (
                                <tr key={key} className="hover:bg-gray-50 transition-colors duration-150">
                                  {fields.map(f => (
                                    <td key={f} className="px-4 py-2">
                                      {f === "State" ? (
                                        formatState(row[f])
                                      ) : Array.isArray(row[f]) ? (
                                        <div className="text-gray-700">
                                          {row[f].map((item, i) => (
                                            <div key={i} className="text-xs">
                                              {typeof item === "object" ? JSON.stringify(item) : item}
                                            </div>
                                          ))}
                                        </div>
                                      ) : typeof row[f] === "object" && row[f] !== null ? (
                                        <span className="text-gray-700 font-mono text-xs">{JSON.stringify(row[f])}</span>
                                      ) : (
                                        <span className="text-gray-700">{row[f] ?? ""}</span>
                                      )}
                                    </td>
                                  ))}
                                  <td className="px-4 py-2">
                                    <button
                                      className="text-blue-600 hover:text-blue-800 text-xs font-medium underline transition-colors duration-150"
                                      onClick={() => {
                                        // Use the comprehensive Advanced data from PowerShell
                                        if (row.Advanced && Object.keys(row.Advanced).length > 0) {
                                          setPopupData(row.Advanced);
                                        } else {
                                          // Fallback: create advanced data from all available fields except the basic ones
                                          const advancedData = {};
                                          Object.keys(row).forEach(key => {
                                            if (!fields.includes(key) && key !== '_appId' && key !== '_server') {
                                              advancedData[key] = row[key];
                                            }
                                          });
                                          setPopupData(Object.keys(advancedData).length > 0 ? advancedData : row);
                                        }
                                      }}
                                    >
                                      Advanced
                                    </button>
                                  </td>
                                </tr>
                              );
                            })}
                        </tbody>
                      </table>
                    </div>
                    </>
                  ) : (
                    <div className="p-8 text-center">
                      <div className="text-gray-400 text-4xl mb-3">{type === "websites" ? "üåê" : "üîß"}</div>
                      <div className="text-gray-500 text-sm">No {type} found for this server</div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        ))}
      </div>
      {popupData && (
        <IISAdvancedPopup 
          data={popupData} 
          onClose={() => setPopupData(null)}
          title={`IIS ${type === "websites" ? "Website" : "Application Pool"} Advanced Settings`}
        />
      )}
    </div>
  );
}
