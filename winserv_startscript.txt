#!/usr/bin/env bash
set -Eeuo pipefail

######### DYNAMIC CONFIG (override via env or backend/.env) #########
# Base dir (defaults to this script's directory)
BASE_DIR="${BASE_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
BACKEND_DIR="${BACKEND_DIR:-$BASE_DIR/backend}"
FRONTEND_DIR="${FRONTEND_DIR:-$BASE_DIR/frontend}"

# Virtualenv: set either VENV_NAME (relative) or VENV_DIR (absolute). VENV_DIR wins if set.
VENV_NAME="${VENV_NAME:-osenv}"
VENV_DIR="${VENV_DIR:-}"   # e.g. /opt/pyenvs/winops

# FastAPI / Uvicorn
UVICORN_APP="${UVICORN_APP:-main:app}"
UVICORN_HOST="${UVICORN_HOST:-0.0.0.0}"
UVICORN_PORT="${UVICORN_PORT:-8000}"
UVICORN_WORKERS="${UVICORN_WORKERS:-2}"
UVICORN_RELOAD="${UVICORN_RELOAD:-false}"

# Frontend
NPM_SCRIPT="${NPM_SCRIPT:-}"                 # auto-detects if empty
NODE_ENV="${NODE_ENV:-production}"
FRONTEND_PORT_HINTS="${FRONTEND_PORT_HINTS:-5173 3000}"

# Logs & PIDs
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
RUN_DIR="${RUN_DIR:-$BASE_DIR/run}"
BACKEND_LOG="$LOG_DIR/backend.log"
FRONTEND_LOG="$LOG_DIR/frontend.log"
BACKEND_PID="$RUN_DIR/backend.pid"
FRONTEND_PID="$RUN_DIR/frontend.pid"

######### HELPERS #########
msg() { printf "[%s] %s\n" "$(date '+%F %T')" "$*"; }
die() { msg "ERROR: $*"; exit 1; }
ensure_dirs() { mkdir -p "$LOG_DIR" "$RUN_DIR"; }

load_dotenv() {
  # Load optional backend/.env (KEY=VALUE per line)
  local envfile="$BACKEND_DIR/.env"
  if [[ -f "$envfile" ]]; then
    set -a
    # shellcheck disable=SC1090
    source "$envfile"
    set +a
    msg "Loaded env from $envfile"
  fi
}

detect_venv() {
  # Resolve VENV_DIR if not explicitly set
  if [[ -n "$VENV_DIR" ]]; then return; fi
  if [[ -d "$BACKEND_DIR/$VENV_NAME" ]]; then
    VENV_DIR="$BACKEND_DIR/$VENV_NAME"
  elif [[ -d "$BASE_DIR/$VENV_NAME" ]]; then
    VENV_DIR="$BASE_DIR/$VENV_NAME"
  else
    die "Python venv not found. Set VENV_NAME (default '$VENV_NAME') correctly or provide VENV_DIR."
  fi
}

activate_venv() {
  detect_venv
  local act="$VENV_DIR/bin/activate"
  [[ -f "$act" ]] || die "Activate script not found at $act"
  # shellcheck disable=SC1090
  source "$act"
  msg "Activated Python venv: $VENV_DIR"
}

is_running() {
  local pidfile="$1"
  [[ -f "$pidfile" ]] || return 1
  local pid; pid="$(cat "$pidfile" 2>/dev/null || true)"
  [[ -n "${pid:-}" ]] || return 1
  kill -0 "$pid" 2>/dev/null
}

detect_npm_script() {
  [[ -f "$FRONTEND_DIR/package.json" ]] || die "package.json not found in $FRONTEND_DIR"
  [[ -n "$NPM_SCRIPT" ]] && return
  if grep -q '"start"' "$FRONTEND_DIR/package.json"; then
    NPM_SCRIPT="start"
  elif grep -q '"dev"' "$FRONTEND_DIR/package.json"; then
    NPM_SCRIPT="dev"
  else
    die "No 'start' or 'dev' script in $FRONTEND_DIR/package.json (set NPM_SCRIPT manually if needed)."
  fi
}

check_port() {
  local port="$1"
  if ss -ltn | awk '{print $4}' | grep -qE "[:.]$port$"; then
    die "Port $port appears to be in use."
  fi
}

hint_frontend_ports() {
  for p in $FRONTEND_PORT_HINTS; do
    if ss -ltn | awk '{print $4}' | grep -qE "[:.]$p$"; then
      msg "Note: Port $p is occupied (frontend may still run on another port per config)."
    fi
  done
}

stop_service() {
  local name="$1" pidfile="$2"
  if is_running "$pidfile"; then
    local pid; pid="$(cat "$pidfile")"
    msg "Stopping $name (pid $pid)..."
    kill "$pid" 2>/dev/null || true
    for _ in {1..20}; do is_running "$pidfile" || break; sleep 0.25; done
    if is_running "$pidfile"; then
      msg "$name still running, sending SIGKILL..."
      kill -9 "$pid" 2>/dev/null || true
    fi
    rm -f "$pidfile"
    msg "$name stopped."
  else
    msg "$name is not running."
    rm -f "$pidfile" || true
  fi
}

status_service() {
  local name="$1" pidfile="$2" log="$3"
  if is_running "$pidfile"; then
    msg "$name: RUNNING (pid $(cat "$pidfile")) | log: $log"
  else
    msg "$name: STOPPED | last log: $log"
  fi
}

######### ACTIONS #########
start_backend() {
  ensure_dirs
  if is_running "$BACKEND_PID"; then
    msg "Backend already running (pid $(cat "$BACKEND_PID"))."; return 0; fi
  load_dotenv
  check_port "$UVICORN_PORT"
  cd "$BACKEND_DIR"
  activate_venv
  msg "Starting backend: uvicorn $UVICORN_APP --host $UVICORN_HOST --port $UVICORN_PORT (workers=$UVICORN_WORKERS, reload=$UVICORN_RELOAD)"
  nohup uvicorn "$UVICORN_APP" \
    --host "$UVICORN_HOST" \
    --port "$UVICORN_PORT" \
    ${UVICORN_RELOAD:+--reload} \
    --workers "$UVICORN_WORKERS" \
    >>"$BACKEND_LOG" 2>&1 &
  echo $! > "$BACKEND_PID"
  sleep 1
  is_running "$BACKEND_PID" && msg "Backend started (pid $(cat "$BACKEND_PID")). Logs: $BACKEND_LOG" || die "Backend failed to start. See $BACKEND_LOG"
}

start_frontend() {
  ensure_dirs
  if is_running "$FRONTEND_PID"; then
    msg "Frontend already running (pid $(cat "$FRONTEND_PID"))."; return 0; fi
  detect_npm_script
  cd "$FRONTEND_DIR"
  if [[ ! -d node_modules ]]; then
    msg "node_modules not found. Running 'npm ci'..."
    npm ci >>"$FRONTEND_LOG" 2>&1 || { tail -n 80 "$FRONTEND_LOG"; die "npm ci failed."; }
  fi
  hint_frontend_ports
  msg "Starting frontend: npm run $NPM_SCRIPT (NODE_ENV=$NODE_ENV)"
  NODE_ENV="$NODE_ENV" nohup npm run "$NPM_SCRIPT" >>"$FRONTEND_LOG" 2>&1 &
  echo $! > "$FRONTEND_PID"
  sleep 1
  is_running "$FRONTEND_PID" && msg "Frontend started (pid $(cat "$FRONTEND_PID")). Logs: $FRONTEND_LOG" || die "Frontend failed to start. See $FRONTEND_LOG"
}

start_all()   { start_backend; start_frontend; }
stop_all()    { stop_service "backend" "$BACKEND_PID"; stop_service "frontend" "$FRONTEND_PID"; }
status_all()  { status_service "backend" "$BACKEND_PID" "$BACKEND_LOG"; status_service "frontend" "$FRONTEND_LOG"; }
restart_all() { stop_all; start_all; }

usage() {
  cat <<EOF
Usage: $(basename "$0") {start|stop|restart|status|start:backend|stop:backend|start:frontend|stop:frontend}

Key env overrides:
  BASE_DIR=/home/user/winserverops
  VENV_NAME=osenv     # or set VENV_DIR=/abs/path/to/venv
  UVICORN_APP=main:app UVICORN_PORT=9000 UVICORN_RELOAD=true
  NPM_SCRIPT=start NODE_ENV=production FRONTEND_PORT_HINTS="4173 5173 3000"
EOF
}

case "${1:-}" in
  start)          start_all ;;
  stop)           stop_all ;;
  restart)        restart_all ;;
  status)         status_all ;;
  start:backend)  start_backend ;;
  stop:backend)   stop_service "backend" "$BACKEND_PID" ;;
  start:frontend) start_frontend ;;
  stop:frontend)  stop_service "frontend" "$FRONTEND_PID" ;;
  *)              usage; exit 1 ;;
esac
