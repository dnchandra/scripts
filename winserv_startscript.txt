#!/usr/bin/env bash
# Simple launcher for backend (uvicorn) and frontend (npm)
set -eEo pipefail

# --- Paths (edit if needed) ---
BASE_DIR="/home/user/winserverops"
BACKEND_DIR="$BASE_DIR/backend"
FRONTEND_DIR="$BASE_DIR/frontend"

# --- Python venv (name only; lives under backend/) ---
VENV_NAME="${VENV_NAME:-osenv}"
VENV_DIR="$BACKEND_DIR/$VENV_NAME"

# --- Ports ---
BACKEND_PORT="${BACKEND_PORT:-8000}"
FRONTEND_PORT="${FRONTEND_PORT:-9000}"

# --- FastAPI app path ---
UVICORN_APP="${UVICORN_APP:-main:app}"

# --- Logs & PIDs ---
LOG_DIR="$BASE_DIR/logs"
RUN_DIR="$BASE_DIR/run"
BACKEND_LOG="$LOG_DIR/backend.log"
FRONTEND_LOG="$LOG_DIR/frontend.log"
BACKEND_PID="$RUN_DIR/backend.pid"
FRONTEND_PID="$RUN_DIR/frontend.pid"

msg() { printf "[%s] %s\n" "$(date '+%F %T')" "$*"; }
ensure_dirs() { mkdir -p "$LOG_DIR" "$RUN_DIR"; }

is_running() {
  local pidfile="$1"
  [[ -f "$pidfile" ]] || return 1
  local pid
  pid="$(cat "$pidfile" 2>/dev/null || true)"
  [[ -n "$pid" ]] || return 1
  kill -0 "$pid" 2>/dev/null
}

check_port_free() {
  local port="$1"
  if ss -ltn | awk '{print $4}' | grep -qE "[:.]$port$"; then
    msg "ERROR: Port $port is already in use."
    exit 1
  fi
}

start_backend() {
  ensure_dirs
  if is_running "$BACKEND_PID"; then
    msg "Backend already running (pid $(cat "$BACKEND_PID"))."
    return 0
  fi

  [[ -f "$VENV_DIR/bin/activate" ]] || { msg "ERROR: venv not found at $VENV_DIR"; exit 1; }

  check_port_free "$BACKEND_PORT"
  cd "$BACKEND_DIR"
  # shellcheck disable=SC1090
  source "$VENV_DIR/bin/activate"

  msg "Starting backend: uvicorn $UVICORN_APP on 0.0.0.0:$BACKEND_PORT"
  nohup uvicorn "$UVICORN_APP" --host 0.0.0.0 --port "$BACKEND_PORT" \
    >>"$BACKEND_LOG" 2>&1 &

  echo $! > "$BACKEND_PID"
  sleep 1
  if is_running "$BACKEND_PID"; then
    msg "Backend started (pid $(cat "$BACKEND_PID")). Logs: $BACKEND_LOG"
  else
    msg "ERROR: Backend failed to start. See $BACKEND_LOG"
    exit 1
  fi
}

start_frontend() {
  ensure_dirs
  if is_running "$FRONTEND_PID"; then
    msg "Frontend already running (pid $(cat "$FRONTEND_PID"))."
    return 0
  fi

  check_port_free "$FRONTEND_PORT"
  cd "$FRONTEND_DIR"

  # Force port 9000 and bind to all interfaces
  msg "Starting frontend: npm start on 0.0.0.0:$FRONTEND_PORT"
  HOST=0.0.0.0 PORT="$FRONTEND_PORT" nohup npm start >>"$FRONTEND_LOG" 2>&1 &

  echo $! > "$FRONTEND_PID"
  sleep 1
  if is_running "$FRONTEND_PID"; then
    msg "Frontend started (pid $(cat "$FRONTEND_PID")). Logs: $FRONTEND_LOG"
    msg "Access: http://<server-ip>:$FRONTEND_PORT"
  else
    msg "ERROR: Frontend failed to start. See $FRONTEND_LOG"
    exit 1
  fi
}

stop_service() {
  local name="$1" pidfile="$2"
  if is_running "$pidfile"; then
    local pid; pid="$(cat "$pidfile")"
    msg "Stopping $name (pid $pid)..."
    kill "$pid" 2>/dev/null || true
    for _ in {1..20}; do is_running "$pidfile" || break; sleep 0.2; done
    if is_running "$pidfile"; then
      msg "$name still running, sending SIGKILL..."
      kill -9 "$pid" 2>/dev/null || true
    fi
    rm -f "$pidfile"
    msg "$name stopped."
  else
    msg "$name not running."
    rm -f "$pidfile" 2>/dev/null || true
  fi
}

status_service() {
  local name="$1" pidfile="$2" log="$3"
  if is_running "$pidfile"; then
    msg "$name: RUNNING (pid $(cat "$pidfile")) | log: $log"
  else
    msg "$name: STOPPED | last log: $log"
  fi
}

usage() {
  cat <<EOF
Usage: $(basename "$0") {start|stop|status|start:backend|stop:backend|start:frontend|stop:frontend}

Defaults:
  Backend: uvicorn $UVICORN_APP on port $BACKEND_PORT
  Frontend: npm start on port $FRONTEND_PORT
  Venv: $VENV_DIR  (set VENV_NAME to change)
EOF
}

case "${1:-}" in
  start)          start_backend; start_frontend ;;
  stop)           stop_service "backend" "$BACKEND_PID"; stop_service "frontend" "$FRONTEND_PID" ;;
  status)         status_service "backend" "$BACKEND_PID" "$BACKEND_LOG"; status_service "frontend" "$FRONTEND_PID" "$FRONTEND_LOG" ;;
  start:backend)  start_backend ;;
  stop:backend)   stop_service "backend" "$BACKEND_PID" ;;
  start:frontend) start_frontend ;;
  stop:frontend)  stop_service "frontend" "$FRONTEND_PID" ;;
  *)              usage; exit 1 ;;
esac
