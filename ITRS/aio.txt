import os
import xml.etree.ElementTree as ET
import pandas as pd

output_excel = "ITRS_Config_Combined.xlsx"
writer = pd.ExcelWriter(output_excel, engine='openpyxl')

# Utility to recursively extract tag paths and text values
def extract_nested_data(elem, path=""):
    data = {}
    for child in elem:
        tag_path = f"{path}/{child.tag}" if path else child.tag
        if list(child):  # Has nested tags
            data.update(extract_nested_data(child, tag_path))
        else:
            data[tag_path] = child.text
    return data

# Parse each XML in current directory
for filename in os.listdir("."):
    if not filename.endswith(".xml"):
        continue

    try:
        tree = ET.parse(filename)
        root = tree.getroot()

        file_id = os.path.splitext(filename)[0][:25]  # Shorten for sheet name use

        # -------------------- Probes --------------------
        probes_data = []

        def parse_probe_group(group_elem, parent_group=""):
            current_group = f"{parent_group}/{group_elem.attrib.get('name', '')}".strip("/")
            for child in group_elem:
                if child.tag == "probeGroup":
                    parse_probe_group(child, current_group)
                elif child.tag == "probe":
                    probe_name = child.attrib.get("name", "")
                    hostname = child.findtext("hostname", "")
                    probes_data.append({
                        "Group Path": current_group,
                        "Probe Name": probe_name,
                        "Hostname": hostname
                    })

        probes_root = root.find(".//Probes") or root.find(".//probes")
        if probes_root is not None:
            for elem in probes_root:
                if elem.tag == "probeGroup":
                    parse_probe_group(elem)

            if probes_data:
                df_probes = pd.DataFrame(probes_data)
                writer.sheets  # To ensure sheets is initialized
                df_probes.to_excel(writer, sheet_name=f"{file_id}_Probes", index=False)

        # -------------------- Managed Entities --------------------
        entities_data = []

        def parse_entity_group(group_elem, path=""):
            group_name = group_elem.attrib.get("name", "")
            current_path = f"{path}/{group_name}".strip("/")
            for child in group_elem:
                if child.tag == "managedEntity":
                    entity_name = child.attrib.get("name", "")
                    probe_ref = child.attrib.get("probe", "")
                    type_ref = child.attrib.get("type", "")
                    sampler_refs = [s.attrib.get("ref", "") for s in child.findall("samplerRef")]
                    entities_data.append({
                        "Entity Group": current_path,
                        "Entity Name": entity_name,
                        "Probe Ref": probe_ref,
                        "Type Ref": type_ref,
                        "Sampler Refs": ", ".join(sampler_refs)
                    })
                elif child.tag == "managedEntityGroup":
                    parse_entity_group(child, current_path)

        entities_root = root.find(".//managedEntities")
        if entities_root is not None:
            for group in entities_root.findall("managedEntityGroup"):
                parse_entity_group(group)

            if entities_data:
                df_entities = pd.DataFrame(entities_data)
                df_entities.to_excel(writer, sheet_name=f"{file_id}_Entities", index=False)

        # -------------------- Samplers --------------------
        samplers_data = []

        for sampler_group in root.findall(".//samplerGroup"):
            group_name = sampler_group.attrib.get("name", "")
            for sampler in sampler_group.findall("sampler"):
                sampler_name = sampler.attrib.get("name", "")
                sampler_info = {
                    "Sampler Group": group_name,
                    "Sampler Name": sampler_name
                }
                nested_data = extract_nested_data(sampler)
                sampler_info.update(nested_data)
                samplers_data.append(sampler_info)

        if samplers_data:
            df_samplers = pd.DataFrame(samplers_data)
            df_samplers.to_excel(writer, sheet_name=f"{file_id}_Samplers", index=False)

        print(f"✅ Processed: {filename}")

    except Exception as e:
        print(f"❌ Failed to parse {filename}: {e}")

# Save Excel if any data was written
if writer.sheets:
    writer.close()
    print(f"\n✅ All data written to {output_excel}")
else:
    print("\n❌ No data extracted from any XML files.")
