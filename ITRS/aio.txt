import os
import xml.etree.ElementTree as ET
import pandas as pd

def get_all_xml_files():
    return [f for f in os.listdir('.') if f.endswith('.xml')]

def extract_probes(root):
    probes = []

    def recurse_groups(element, path):
        for child in element:
            if child.tag.lower() == 'probegroup':
                name = child.attrib.get('name', 'UnnamedGroup')
                new_path = path + [name]
                recurse_groups(child, new_path)
            elif child.tag.lower() == 'probe':
                probe_name = child.attrib.get('name', 'UnnamedProbe')
                hostname = child.findtext('hostname', default='N/A')
                probes.append({
                    'Group Path': ' > '.join(path),
                    'Probe Name': probe_name,
                    'Hostname': hostname
                })

    probes_root = root.find('.//Probes') or root.find('.//probes')
    if probes_root is not None:
        recurse_groups(probes_root, [])
    return pd.DataFrame(probes)

def extract_entities(root):
    entities = []

    def recurse_entity_groups(element, path):
        for child in element:
            if child.tag.lower() == 'managedentitygroup':
                name = child.attrib.get('name', 'UnnamedGroup')
                recurse_entity_groups(child, path + [name])
            elif child.tag.lower() == 'managedentity':
                entity_name = child.attrib.get('name', 'UnnamedEntity')
                probe_ref = child.attrib.get('probe', '')
                type_ref = child.attrib.get('type', '')
                sampler_refs = []
                for sampler in child.findall('.//samplerRef'):
                    sampler_refs.append(sampler.attrib.get('name', ''))
                entities.append({
                    'Group Path': ' > '.join(path),
                    'Entity Name': entity_name,
                    'Probe Ref': probe_ref,
                    'Type Ref': type_ref,
                    'Sampler Refs': ', '.join(sampler_refs)
                })

    entities_root = root.find('.//ManagedEntities') or root.find('.//managedEntities')
    if entities_root is not None:
        recurse_entity_groups(entities_root, [])
    return pd.DataFrame(entities)

def extract_samplers(root):
    samplers = []

    def parse_sampler_group(group_element):
        group_name = group_element.attrib.get('name', 'UnnamedGroup')
        for sampler in group_element.findall('sampler'):
            entry = {'Group Name': group_name}
            entry['Sampler Name'] = sampler.attrib.get('name', 'UnnamedSampler')
            for sub_elem in sampler:
                tag = sub_elem.tag
                text = sub_elem.text.strip() if sub_elem.text else ''
                entry[tag] = text
            samplers.append(entry)

    samplers_root = root.find('.//samplers')
    if samplers_root is not None:
        for group in samplers_root.findall('samplerGroup'):
            parse_sampler_group(group)
    return pd.DataFrame(samplers)

def main():
    all_files = get_all_xml_files()
    writer = pd.ExcelWriter('ITRS_Config_Full.xlsx', engine='xlsxwriter')

    for file in all_files:
        try:
            tree = ET.parse(file)
            root = tree.getroot()

            probes_df = extract_probes(root)
            entities_df = extract_entities(root)
            samplers_df = extract_samplers(root)

            base_name = os.path.splitext(os.path.basename(file))[0]
            if not probes_df.empty:
                probes_df.to_excel(writer, sheet_name=f'{base_name}_Probes', index=False)
            if not entities_df.empty:
                entities_df.to_excel(writer, sheet_name=f'{base_name}_Entities', index=False)
            if not samplers_df.empty:
                samplers_df.to_excel(writer, sheet_name=f'{base_name}_Samplers', index=False)

            print(f"‚úÖ Processed {file}")

        except Exception as e:
            print(f"‚ùå Error processing {file}: {e}")

    writer.close()
    print("\nüìÅ Output saved to: ITRS_Config_Full.xlsx")

if __name__ == "__main__":
    main()
