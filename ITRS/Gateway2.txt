import os
import sys
import xml.etree.ElementTree as ET
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
import argparse
from datetime import datetime
import re
import logging

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("geneos_extract.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Extract data from Geneos Gateway configuration XML files')
    parser.add_argument('-c', '--config', default='gateway.xml', help='Path to gateway configuration file')
    parser.add_argument('-o', '--output', default='geneos_alerts_summary.xlsx', help='Output Excel file path')
    parser.add_argument('-i', '--include-dir', help='Additional directory to search for included files')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    return parser.parse_args()

def resolve_include_path(base_path, include_path, include_dir=None):
    """Resolve the path of an included file"""
    # First try relative to the current file
    resolved_path = os.path.join(os.path.dirname(base_path), include_path)
    if os.path.isfile(resolved_path):
        return resolved_path
    
    # Try with include_dir if provided
    if include_dir:
        alt_path = os.path.join(include_dir, include_path)
        if os.path.isfile(alt_path):
            return alt_path
            
    # Try with basename only
    basename = os.path.basename(include_path)
    base_dir = os.path.dirname(base_path)
    for root, _, files in os.walk(base_dir):
        if basename in files:
            return os.path.join(root, basename)
            
    return None

def parse_with_includes(file_path, include_dir=None, parsed_files=None, depth=0):
    """Parse XML file and recursively process included files"""
    if parsed_files is None:
        parsed_files = set()
    
    if file_path in parsed_files:
        logger.debug(f"{'  ' * depth}Skipping already parsed file: {file_path}")
        return None
        
    if not os.path.isfile(file_path):
        logger.warning(f"{'  ' * depth}File not found: {file_path}")
        return None
        
    parsed_files.add(file_path)
    logger.info(f"{'  ' * depth}Parsing file: {file_path}")

    try:
        tree = ET.parse(file_path)
        root = tree.getroot()

        # Process includes
        includes = root.findall(".//include")
        for include in includes:
            include_path = include.text.strip() if include.text else ""
            if not include_path:
                logger.warning(f"{'  ' * depth}Empty include path in {file_path}")
                continue
                
            resolved_path = resolve_include_path(file_path, include_path, include_dir)
            if resolved_path:
                logger.debug(f"{'  ' * depth}Processing include: {include_path} -> {resolved_path}")
                include_root = parse_with_includes(resolved_path, include_dir, parsed_files, depth + 1)
                if include_root is not None:
                    # Import all children from the included file
                    for child in include_root:
                        root.append(child)
            else:
                logger.warning(f"{'  ' * depth}Cannot resolve include path: {include_path}")
                
            # Remove the processed include element
            parent = root.find(f".//*[include='{include_path}']")
            if parent is not None:
                parent.remove(include)
                
        return root
    except ET.ParseError as e:
        logger.error(f"{'  ' * depth}Error parsing {file_path}: {e}")
        return None
    except Exception as e:
        logger.error(f"{'  ' * depth}Unexpected error processing {file_path}: {e}")
        return None

def extract_rules_data(root):
    """Extract rules data from XML"""
    rules = []
    
    # Find all rulesets
    rulesets = root.findall(".//ruleSet")
    for ruleset in rulesets:
        ruleset_name = ruleset.get("name", "")
        
        # Process rules in this ruleset
        for rule in ruleset.findall(".//rule"):
            rule_name = rule.get("name", "")
            condition = rule.findtext("condition", default="").strip()
            severity = rule.findtext("severity", default="").strip()
            variable = rule.findtext("variable", default="").strip()
            
            # Extract delay information
            delay = rule.findtext("delay", default="").strip()
            
            # Extract action information
            actions = []
            for action in rule.findall(".//action"):
                action_type = action.get("type", "")
                action_name = action.get("name", "")
                actions.append(f"{action_type}: {action_name}")
                
            rules.append({
                "ruleset": ruleset_name,
                "name": rule_name,
                "condition": condition,
                "severity": severity,
                "variable": variable,
                "delay": delay,
                "actions": "; ".join(actions)
            })
            
    return rules

def extract_samplers_data(root):
    """Extract sampler data from XML"""
    samplers = {}
    for sampler in root.findall(".//sampler"):
        name = sampler.get("name", "")
        if not name:  # Skip samplers without names
            continue
            
        sampler_type = sampler.get("type", "Unknown")
        
        # Extract sampler-specific attributes based on type
        attributes = {}
        if sampler_type == "SQL":
            attributes["query"] = sampler.findtext(".//query", default="").strip()
            attributes["database"] = sampler.findtext(".//database", default="").strip()
        elif sampler_type == "process":
            attributes["command"] = sampler.findtext(".//command", default="").strip()
        elif sampler_type == "snmp":
            attributes["oid"] = sampler.findtext(".//oid", default="").strip()
            
        # Extract common attributes
        attributes["interval"] = sampler.findtext(".//interval", default="").strip()
        attributes["timeout"] = sampler.findtext(".//timeout", default="").strip()
        
        # Extract all variables
        variables = {}
        for var in sampler.findall(".//var"):
            var_name = var.get("name", "")
            var_value = var.get("value", "")
            if var_name:
                variables[var_name] = var_value
                
        samplers[name] = {
            "type": sampler_type,
            "attributes": attributes,
            "variables": variables
        }
        
    return samplers

def extract_entities_data(root):
    """Extract entity data from XML"""
    entities = {}
    for entity in root.findall(".//entity"):
        entity_name = entity.get("name", "")
        if not entity_name:  # Skip entities without names
            continue
            
        # Get path to entity (managed entity hierarchy)
        path = []
        parent = entity.getparent()
        while parent is not None and parent.tag == "managedEntity":
            parent_name = parent.get("name", "")
            if parent_name:
                path.insert(0, parent_name)
            parent = parent.getparent()
            
        path_str = "/".join(path)
        
        # Get sampler references
        sampler_refs = []
        for sref in entity.findall(".//samplerRef"):
            ref = sref.get("ref", "")
            if ref:
                sampler_refs.append(ref)
                
        # Get gateway name if available
        gateway = ""
        gateway_elem = root.find(".//gateway")
        if gateway_elem is not None:
            gateway = gateway_elem.get("name", "")
            
        entities[entity_name] = {
            "path": path_str,
            "gateway": gateway,
            "sampler_refs": sampler_refs
        }
        
    return entities

def extract_data(root):
    """Extract all relevant data from the XML"""
    return {
        "entities": extract_entities_data(root),
        "samplers": extract_samplers_data(root),
        "rules": extract_rules_data(root)
    }

def format_worksheet(ws):
    """Apply formatting to worksheet"""
    # Define styles
    header_fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    header_font = Font(color="FFFFFF", bold=True)
    border = Border(
        left=Side(style='thin'), 
        right=Side(style='thin'), 
        top=Side(style='thin'), 
        bottom=Side(style='thin')
    )
    
    # Format header row
    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
        cell.border = border
        
    # Auto-adjust column widths
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            if cell.value:
                cell.border = border
                cell.alignment = Alignment(vertical='center', wrap_text=True)
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
        adjusted_width = min(max_length + 2, 50)  # Cap width at 50
        ws.column_dimensions[column].width = adjusted_width
        
    # Freeze header row
    ws.freeze_panes = "A2"

def create_alerts_worksheet(wb, data):
    """Create the alerts summary worksheet"""
    ws = wb.active
    ws.title = "Alerts Summary"
    
    # Define headers
    headers = [
        'Gateway', 'Entity Path', 'Entity', 'Sampler', 'Sampler Type', 
        'Rule Set', 'Rule Name', 'Condition', 'Severity', 'Delay',
        'Variables', 'Actions'
    ]
    ws.append(headers)
    
    # Add data rows
    count = 0
    for entity_name, entity_data in data['entities'].items():
        entity_path = entity_data['path']
        gateway = entity_data['gateway']
        
        for sampler_ref in entity_data['sampler_refs']:
            sampler_data = data['samplers'].get(sampler_ref, {})
            sampler_type = sampler_data.get('type', 'Unknown')
            variables = "; ".join(f"{k}={v}" for k, v in sampler_data.get('variables', {}).items())
            
            # Match with rules
            matched = False
            for rule in data['rules']:
                # A simple rule matching logic - can be improved based on actual Gateway behavior
                rule_var = rule['variable']
                if not rule_var or rule_var in sampler_data.get('variables', {}):
                    ws.append([
                        gateway,
                        entity_path,
                        entity_name,
                        sampler_ref,
                        sampler_type,
                        rule['ruleset'],
                        rule['name'],
                        rule['condition'],
                        rule['severity'],
                        rule['delay'],
                        variables,
                        rule['actions']
                    ])
                    matched = True
                    count += 1
                    
            # If no rule matched
            if not matched:
                ws.append([
                    gateway,
                    entity_path,
                    entity_name,
                    sampler_ref,
                    sampler_type,
                    "",
                    "No rule matched",
                    "",
                    "",
                    "",
                    variables,
                    ""
                ])
                count += 1
                
    format_worksheet(ws)
    return count

def create_samplers_worksheet(wb, data):
    """Create the samplers worksheet"""
    ws = wb.create_sheet(title="Samplers")
    
    # Define headers
    headers = [
        'Sampler Name', 'Type', 'Interval', 'Timeout', 
        'Type-Specific Attributes', 'Variables'
    ]
    ws.append(headers)
    
    # Add data rows
    for sampler_name, sampler_data in data['samplers'].items():
        attributes = sampler_data.get('attributes', {})
        
        # Format type-specific attributes
        type_specific = []
        if sampler_data['type'] == 'SQL':
            if 'query' in attributes:
                type_specific.append(f"Query: {attributes['query']}")
            if 'database' in attributes:
                type_specific.append(f"DB: {attributes['database']}")
        elif sampler_data['type'] == 'process':
            if 'command' in attributes:
                type_specific.append(f"Command: {attributes['command']}")
        elif sampler_data['type'] == 'snmp':
            if 'oid' in attributes:
                type_specific.append(f"OID: {attributes['oid']}")
                
        attributes_str = "; ".join(type_specific)
        variables = "; ".join(f"{k}={v}" for k, v in sampler_data.get('variables', {}).items())
        
        ws.append([
            sampler_name,
            sampler_data['type'],
            attributes.get('interval', ''),
            attributes.get('timeout', ''),
            attributes_str,
            variables
        ])
        
    format_worksheet(ws)
    return len(data['samplers'])

def create_rules_worksheet(wb, data):
    """Create the rules worksheet"""
    ws = wb.create_sheet(title="Rules")
    
    # Define headers
    headers = [
        'Rule Set', 'Rule Name', 'Condition', 'Severity', 
        'Variable', 'Delay', 'Actions'
    ]
    ws.append(headers)
    
    # Add data rows
    for rule in data['rules']:
        ws.append([
            rule['ruleset'],
            rule['name'],
            rule['condition'],
            rule['severity'],
            rule['variable'],
            rule['delay'],
            rule['actions']
        ])
        
    format_worksheet(ws)
    return len(data['rules'])

def create_summary_worksheet(wb, counts):
    """Create a summary worksheet"""
    ws = wb.create_sheet(title="Summary", index=0)  # Insert at the beginning
    
    # Add title
    ws['A1'] = "Geneos Gateway Configuration Summary"
    ws['A1'].font = Font(size=14, bold=True)
    ws.merge_cells('A1:B1')
    
    # Add metadata
    ws['A3'] = "Generated:"
    ws['B3'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Add statistics
    ws['A5'] = "Total Entities:"
    ws['B5'] = counts.get('entities', 0)
    
    ws['A6'] = "Total Samplers:"
    ws['B6'] = counts.get('samplers', 0)
    
    ws['A7'] = "Total Rules:"
    ws['B7'] = counts.get('rules', 0)
    
    ws['A8'] = "Total Alert Mappings:"
    ws['B8'] = counts.get('alerts', 0)
    
    # Format
    for row in range(3, 9):
        ws[f'A{row}'].font = Font(bold=True)
        
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            if cell.value:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
        adjusted_width = max(max_length + 2, 20)
        ws.column_dimensions[column].width = adjusted_width

def write_excel(data, output_file):
    """Write extracted data to Excel file"""
    wb = Workbook()
    
    # Create worksheets
    alerts_count = create_alerts_worksheet(wb, data)
    samplers_count = create_samplers_worksheet(wb, data)
    rules_count = create_rules_worksheet(wb, data)
    
    # Create summary
    counts = {
        'entities': len(data['entities']),
        'samplers': samplers_count,
        'rules': rules_count,
        'alerts': alerts_count
    }
    create_summary_worksheet(wb, counts)
    
    # Save workbook
    try:
        wb.save(output_file)
        logger.info(f"Excel output written to: {output_file}")
        logger.info(f"Summary: {counts['entities']} entities, {counts['samplers']} samplers, "
                   f"{counts['rules']} rules, {counts['alerts']} alert mappings")
    except Exception as e:
        logger.error(f"Error saving Excel file: {e}")

def main():
    """Main function"""
    args = parse_arguments()
    
    # Set logging level
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    logger.info(f"Starting Geneos Gateway XML extraction")
    logger.info(f"Config file: {args.config}")
    logger.info(f"Output file: {args.output}")
    
    # Parse configuration
    root = parse_with_includes(args.config, args.include_dir)
    if root is not None:
        # Extract data
        data = extract_data(root)
        
        # Write to Excel
        write_excel(data, args.output)
        logger.info("Process completed successfully")
    else:
        logger.error("Failed to parse gateway configuration.")
        return 1
        
    return 0

if __name__ == "__main__":
    sys.exit(main())
