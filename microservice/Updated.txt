#!/bin/bash

BASE_DIR="/apps/services"
CONSUL_DIR="/products/consul"
LOG_FILE="/apps/logs/microservice_registration.log"
SYSTEMD_DIR="/etc/systemd/system"

echo "$(date): Starting microservices registration..." > "$LOG_FILE"

# Function to register a service if not already registered
register_service() {
    local service_name=$1
    local service_file="$SYSTEMD_DIR/$service_name.service"

    if [ -f "$service_file" ]; then
        echo "$(date): $service_name is already registered. Skipping." >> "$LOG_FILE"
    else
        echo "$(date): Registering $service_name..." >> "$LOG_FILE"
        cat <<EOF > "$service_file"
[Unit]
Description=$service_name Service
After=network.target consul.service

[Service]
User=msgroup
ExecStart=/bin/bash -c '$BASE_DIR/$service_name/1/start-service.sh >> /apps/logs/startup.log &'
ExecStop=/bin/bash -c '$BASE_DIR/$service_name/1/stop-service.sh >> /apps/logs/shutdown.log &'
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF

        systemctl daemon-reload
        systemctl enable "$service_name.service"
        echo "$(date): Registered $service_name successfully." >> "$LOG_FILE"
    fi
}

# Function to start a service if not already running
start_service() {
    local service_name=$1
    if systemctl is-active --quiet "$service_name.service"; then
        echo "$(date): $service_name is already running. Skipping start." >> "$LOG_FILE"
    else
        echo "$(date): Starting $service_name..." >> "$LOG_FILE"
        systemctl start "$service_name.service"
    fi
}

# 1️⃣ Register and Start Consul FIRST
if [ -f "$CONSUL_DIR/startup.sh" ]; then
    echo "$(date): Registering Consul service..." >> "$LOG_FILE"
    cat <<EOF > "$SYSTEMD_DIR/consul.service"
[Unit]
Description=Consul Service
After=network.target

[Service]
User=msgroup
ExecStart=/bin/bash -c '$CONSUL_DIR/startup.sh >> $CONSUL_DIR/consul.log 2>&1'
ExecStop=/bin/bash -c '$CONSUL_DIR/stop.sh >> $CONSUL_DIR/consul.log 2>&1'
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable consul.service
    systemctl start consul.service
    echo "$(date): Consul service registered and started." >> "$LOG_FILE"

    # Wait for Consul to be UP (max 90 sec)
    for i in {1..18}; do
        if systemctl is-active --quiet consul.service; then
            echo "$(date): Consul is up." >> "$LOG_FILE"
            break
        fi
        echo "$(date): Waiting for Consul to come up ($((i*5)) sec elapsed)..." >> "$LOG_FILE"
        sleep 5
    done
else
    echo "$(date): Consul not found! Skipping Consul startup." >> "$LOG_FILE"
fi

# 2️⃣ Register & Start MonitorService (wait up to 90 sec)
if [ -d "$BASE_DIR/MonitorService" ]; then
    register_service "MonitorService"
    start_service "MonitorService"
    for i in {1..18}; do
        if systemctl is-active --quiet MonitorService.service; then
            echo "$(date): MonitorService is up." >> "$LOG_FILE"
            break
        fi
        echo "$(date): Waiting for MonitorService to come up ($((i*5)) sec elapsed)..." >> "$LOG_FILE"
        sleep 5
    done
fi

# 3️⃣ Register & Start AuthService (wait 30 sec)
if [ -d "$BASE_DIR/AuthService" ]; then
    register_service "AuthService"
    start_service "AuthService"
    sleep 30
fi

# 4️⃣ Register & Start Remaining Services in Parallel
for service_dir in "$BASE_DIR"/*; do
    service_name=$(basename "$service_dir")
    if [[ -d "$service_dir" && "$service_name" != "MonitorService" && "$service_name" != "AuthService" ]]; then
        register_service "$service_name"
        start_service "$service_name" &
    fi
done

echo "$(date): All services registered and started successfully!" >> "$LOG_FILE"
