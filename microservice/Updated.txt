#!/bin/bash

# Directories
BASE_DIR="/apps/services"
CONSUL_DIR="/products/consul"
LOG_FILE="/apps/logs/microservice_registration.log"
SYSTEMD_DIR="/etc/systemd/system"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to check if a service is active
is_service_active() {
    systemctl is-active --quiet "$1"
}

# Function to register a microservice
register_service() {
    local service_name="$1"
    local service_path="$BASE_DIR/$service_name/1/start-service.sh"
    local service_unit="$SYSTEMD_DIR/$service_name.service"

    if [[ ! -f "$service_path" ]]; then
        log_message "Service $service_name does not have start-service.sh, skipping..."
        return
    fi

    if [[ -f "$service_unit" ]]; then
        log_message "Service $service_name is already registered."
    else
        log_message "Registering $service_name..."
        cat <<EOF >"$service_unit"
[Unit]
Description=$service_name Service
After=network.target consul.service

[Service]
User=msgroup
ExecStart=/bin/bash -c '$service_path >> /apps/logs/startup.log &'
ExecStop=/bin/bash -c '$BASE_DIR/$service_name/1/stop-service.sh >> /apps/logs/shutdown.log &'
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF
        systemctl daemon-reload
        systemctl enable "$service_name"
    fi
}

# Function to start a service with a timeout
start_service_with_timeout() {
    local service_name="$1"
    local timeout="$2"
    local elapsed=0

    log_message "Starting $service_name..."
    systemctl start "$service_name"

    while [[ $elapsed -lt $timeout ]]; do
        if is_service_active "$service_name"; then
            log_message "$service_name is up and running."
            return 0
        fi
        sleep 5
        ((elapsed+=5))
    done

    log_message "ERROR: $service_name did not start within $timeout seconds."
    return 1
}

### STEP 1: Start Consul ###
log_message "Starting Consul service..."
systemctl start consul
start_service_with_timeout "consul" 90 || log_message "ERROR: Consul failed to start."

### STEP 2: Register and Start MonitorService ###
log_message "Registering MonitorService..."
register_service "MonitorService"
start_service_with_timeout "MonitorService" 90 || log_message "Skipping MonitorService due to startup failure."

### STEP 3: Register and Start AuthService ###
log_message "Registering AuthService..."
register_service "AuthService"
start_service_with_timeout "AuthService" 30 || log_message "Skipping AuthService due to startup failure."

### STEP 4: Register and Start Remaining Services in Parallel ###
log_message "Registering and starting remaining services..."
for service in $(ls "$BASE_DIR"); do
    if [[ "$service" != "MonitorService" && "$service" != "AuthService" ]]; then
        register_service "$service"
        systemctl start "$service" &
    fi
done
wait
log_message "All services registered and started."

