#!/bin/bash

BASE_DIR="/apps/services"
CONSUL_DIR="/products/consul"
SYSTEMD_DIR="/etc/systemd/system"
LOG_FILE="/apps/logs/microservice_registration.log"
CONSUL_READY_SCRIPT="/usr/local/bin/check_consul_ready.sh"

log_message() {
    echo "$(date): $1" >> "$LOG_FILE"
}

register_service() {
    local service_name=$1
    local service_path="$BASE_DIR/$service_name/1"
    local start_script="$service_path/start-service.sh"
    local stop_script="$service_path/stop-service.sh"
    local env_file="$service_path/start.sh"
    local unit_file="$SYSTEMD_DIR/$service_name.service"

    if [ -f "$unit_file" ]; then
        log_message "$service_name already registered. Skipping."
        return
    fi

    if [ ! -f "$start_script" ]; then
        log_message "$service_name does not have start-service.sh. Skipping."
        return
    fi

    local start_cmd="/bin/bash -c '$start_script >> /apps/logs/startup.log 2>&1 &'"
    local stop_cmd="$stop_script"
    local after_deps="After=network.target"
    local delay=""
    local env_line=""

    case "$service_name" in
        MonitorService)
            after_deps+=" consul.service"
            delay="ExecStartPre=$CONSUL_READY_SCRIPT || sleep 60"
            ;;
        AuthService)
            after_deps+=" consul.service MonitorService.service"
            delay="ExecStartPre=/bin/sleep 45"
            ;;
        *)
            after_deps+=" consul.service MonitorService.service"
            delay="ExecStartPre=/bin/sleep 30"
            ;;
    esac

    if [ -f "$env_file" ]; then
        env_line="EnvironmentFile=$env_file"
    fi

    cat <<EOF > "$unit_file"
[Unit]
Description=$service_name Service
$after_deps

[Service]
User=msuser
Group=mggroup
$env_line
$delay
ExecStart=$start_cmd
ExecStop=$stop_cmd
Type=forking
Restart=on-failure
TimeoutStartSec=90s

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable "$service_name"
    log_message "$service_name registered successfully."
}

# Register Consul
if [ -f "$CONSUL_DIR/startup.sh" ]; then
    cat <<EOF > "$SYSTEMD_DIR/consul.service"
[Unit]
Description=Consul Service
After=network.target

[Service]
User=msuser
Group=mggroup
ExecStart=/bin/bash -c '$CONSUL_DIR/startup.sh >> /apps/logs/startup.log 2>&1 &'
ExecStop=/bin/bash -c '$CONSUL_DIR/stop.sh >> /apps/logs/shutdown.log 2>&1 &'
Type=forking
Restart=on-failure
TimeoutStartSec=90s

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable consul.service
    log_message "Consul service registered."
fi

# Register all services that have start-service.sh
for dir in "$BASE_DIR"/*/1; do
    if [ -f "$dir/start-service.sh" ]; then
        service_name=$(basename "$(dirname "$dir")")
        register_service "$service_name"
    fi
done

log_message "All microservices registration complete."
