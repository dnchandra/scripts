

sudo vi /etc/systemd/system/consul.service

[Unit]
Description=Consul Agent
After=network.target

[Service]
User=consul
Group=consul
ExecStart=/bin/bash -c "cd /var/lib/consul && /usr/bin/consul agent -config-dir=/etc/consul.d/ -dev -data-dir=/var/lib/consul"
Restart=always
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target


cat /etc/systemd/system/microservice@.service
cat /etc/systemd/system/microservice-registration.service
cat /etc/systemd/system/microservice-registration.timer
cat /etc/systemd/system/microservice-deregistration.service
cat /etc/systemd/system/microservice-deregistration.timer
systemctl list-units --type=service | grep microservice@
systemctl list-timers --all | grep microservice







++++++++++ /etc/systemd/system/microservice-deregistration.timer ++++++++++

[Unit]
Description=Run microservice deregistration every 30s

[Timer]
OnUnitActiveSec=30s
OnBootSec=10s
Unit=microservice-deregistration.service

[Install]
WantedBy=timers.target


++++++++++ /etc/systemd/system/microservice-registration.timer ++++++++++

[Unit]
Description=Run microservice registration every 30s
Requires=microservice-registration.service
After=microservice-registration.service

[Timer]
OnUnitActiveSec=30s
OnBootSec=10s
Unit=microservice-registration.service

[Install]
WantedBy=timers.target



++++++++++ /etc/systemd/system/microservice-registration.service ++++++++++

[Unit]
Description=Microservice Registration Service
After=network.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c '/home/msuser/microservice_registration.sh &'
RemainAfterExit=no

[Install]
WantedBy=multi-user.target

++++++++++ /etc/systemd/system/microservice-deregistration.service ++++++++++

[Unit]
Description=Microservice Deregistration Service
After=network.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c '/home/msuser/microservice_deregistration.sh &'
RemainAfterExit=no

[Install]
WantedBy=multi-user.target





++++++++++ microservice_deregistration.sh ++++++++++ 

#!/bin/bash

BASE_DIR="/home/msuser/demo/microservices-demo"
LOG_FILE="/var/log/microservice_deregistration.log"
SYSTEMD_DIR="/etc/systemd/system"

stop_service() {
    local service=$1
    local service_file="$SYSTEMD_DIR/$service.service"

    echo "$(date '+%Y-%m-%d %H:%M:%S') - Checking microservice: $service" | tee -a "$LOG_FILE"

    # Stop and disable service if it's running
    if systemctl list-units --full -all | grep -q "$service.service"; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Stopping and deregistering $service" | tee -a "$LOG_FILE"
        sudo systemctl stop "$service" &>>"$LOG_FILE"
        sudo systemctl disable "$service" &>>"$LOG_FILE"
        sudo systemctl reset-failed "$service" &>>"$LOG_FILE"
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping $service: Not running or registered." | tee -a "$LOG_FILE"
    fi

    # Remove the systemd service file only if it belongs to our microservices
    if [[ -f "$service_file" && -d "$BASE_DIR/$service" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Removing systemd service file: $service_file" | tee -a "$LOG_FILE"
        sudo rm -f "$service_file"
    fi
}

# Get list of microservices (only directories inside BASE_DIR)
for service in "$BASE_DIR"/*/; do
    [[ -d "$service" ]] || continue  # Ensure it's a directory
    service=$(basename "$service")

    # Deregister only if start-service.sh is missing
    if [[ ! -f "$BASE_DIR/$service/start-service.sh" ]]; then
        stop_service "$service"
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping $service: start-service.sh exists." | tee -a "$LOG_FILE"
    fi
done

# Reload systemd after changes
sudo systemctl daemon-reload

echo "$(date '+%Y-%m-%d %H:%M:%S') - Microservice deregistration completed." | tee -a "$LOG_FILE"


++++++++++  cat microservice_registration.sh ++++++++++ 



#!/bin/bash

BASE_DIR="/home/msuser/demo/microservices-demo"
LOG_FILE="/home/msuser/demo/microservices-demo/microservice_registration.log"
SYSTEMD_DIR="/etc/systemd/system"

register_service() {
    local service=$1
    local service_path="$BASE_DIR/$service"
    local service_file="$SYSTEMD_DIR/$service.service"

    # Check if service directory exists
    if [[ ! -d "$service_path" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping $service: Directory not found." | tee -a "$LOG_FILE"
        return
    fi

    # Check if start-service.sh exists
    if [[ ! -f "$service_path/start-service.sh" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping $service: start-service.sh not found." | tee -a "$LOG_FILE"
        return
    fi

    # Create systemd service file if not exists
    if [[ ! -f "$service_file" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Creating systemd service file for: $service" | tee -a "$LOG_FILE"
        cat <<EOF | sudo tee "$service_file" > /dev/null
[Unit]
Description=Microservice $service
After=network.target
Requires=consul.service
EOF

        # Add dependencies for MonitorService and AuthService
        if [[ "$service" == "MonitorService" ]]; then
            echo "After=consul.service" | sudo tee -a "$service_file" > /dev/null
            echo "Requires=consul.service" | sudo tee -a "$service_file" > /dev/null
        elif [[ "$service" == "AuthService" ]]; then
            echo "After=MonitorService.service" | sudo tee -a "$service_file" > /dev/null
            echo "Requires=MonitorService.service" | sudo tee -a "$service_file" > /dev/null
        fi

        cat <<EOF | sudo tee -a "$service_file" > /dev/null
[Service]
User=msuser
Group=msgroup
WorkingDirectory=$service_path
ExecStart=/bin/bash -c 'exec java -jar target/$service-1.0-SNAPSHOT.jar >> $service.log 2>&1'
ExecStop=/bin/bash -c 'pkill -f "java -jar target/$service-1.0-SNAPSHOT.jar"'
Restart=on-failure
Type=simple

[Install]
WantedBy=multi-user.target
EOF

        sudo chmod 644 "$service_file"
    fi

    # Reload systemd
    sudo systemctl daemon-reload

    # Enable and start the service
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Registering and starting microservice: $service" | tee -a "$LOG_FILE"
    sudo systemctl enable --now "$service" &>>"$LOG_FILE"

    # Check if service failed and retry once
    if ! systemctl is-active "$service" &>/dev/null; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $service failed to start. Retrying..." | tee -a "$LOG_FILE"
        sudo systemctl restart "$service" &>>"$LOG_FILE"
        if ! systemctl is-active "$service" &>/dev/null; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $service failed again. Manual intervention required!" | tee -a "$LOG_FILE"
        fi
    fi
}

# Step 1: Start Consul first
if [[ -d "$BASE_DIR/Consul" ]]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting Consul service..." | tee -a "$LOG_FILE"
    register_service "Consul"
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping Consul: Directory not found." | tee -a "$LOG_FILE"
fi

# Step 2: Start MonitorService and wait 20 seconds
if [[ -d "$BASE_DIR/MonitorService" ]]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting MonitorService..." | tee -a "$LOG_FILE"
    register_service "MonitorService"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Waiting for 20 seconds before starting AuthService..." | tee -a "$LOG_FILE"
    sleep 20
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping MonitorService: Directory not found." | tee -a "$LOG_FILE"
fi

# Step 3: Start AuthService and wait 30 seconds
if [[ -d "$BASE_DIR/AuthService" ]]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting AuthService..." | tee -a "$LOG_FILE"
    register_service "AuthService"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Waiting for 30 seconds before starting remaining services..." | tee -a "$LOG_FILE"
    sleep 30
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping AuthService: Directory not found." | tee -a "$LOG_FILE"
fi

# Step 4: Start remaining services in parallel
for service in "$BASE_DIR"/*/; do
    [[ -d "$service" ]] || continue
    service=$(basename "$service")

    # Skip Consul, MonitorService, and AuthService as they are already handled
    if [[ "$service" == "Consul" || "$service" == "MonitorService" || "$service" == "AuthService" ]]; then
        continue
    fi

    echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting $service in parallel..." | tee -a "$LOG_FILE"
    register_service "$service" &
done

wait  # Wait for all parallel services to complete

echo "$(date '+%Y-%m-%d %H:%M:%S') - Microservice registration completed." | tee -a "$LOG_FILE"

++++++++++ /etc/systemd/system/microservice@.service ++++++++++

[Unit]
Description=Microservice %i
After=network.target

[Service]
User=msuser
WorkingDirectory=/home/msuser/demo/microservices-demo/%i
ExecStart=/bin/bash -c 'exec java -jar target/%i-1.0-SNAPSHOT.jar >> %i.log 2>&1'
ExecStop=/bin/bash -c 'pkill -f "java -jar target/%i-1.0-SNAPSHOT.jar"'
Restart=on-failure
Type=simple

[Install]
WantedBy=multi-user.target


++++++++++   manage_services.sh ++++++++++  


#!/bin/bash

BASE_DIR="/home/msuser/demo/microservices-demo"
LOG_FILE="/home/msuser/demo/microservices-demo/log/microservice_management.log"
WAIT_TIME=32  # Wait time in seconds for restart

usage() {
    echo "Usage: $0 {start|stop|restart} <service1> [service2] ... [all]"
    exit 1
}

rename_file() {
    local service=$1
    local action=$2
    local service_path="$BASE_DIR/$service"

    # Check if the service directory exists
    if [[ ! -d "$service_path" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: Service '$service' not found in '$BASE_DIR'." | tee -a "$LOG_FILE"
        return
    fi

    case $action in
        start)
            if [[ -f "$service_path/start-service.bak" ]]; then
                mv "$service_path/start-service.bak" "$service_path/start-service.sh"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Started service '$service'." | tee -a "$LOG_FILE"
            else
                echo "$(date '+%Y-%m-%d %H:%M:%S') - WARNING: Service '$service' is already running or missing 'start-service.bak'." | tee -a "$LOG_FILE"
            fi
            ;;
        stop)
            if [[ -f "$service_path/start-service.sh" ]]; then
                mv "$service_path/start-service.sh" "$service_path/start-service.bak"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Stopped service '$service'." | tee -a "$LOG_FILE"
            else
                echo "$(date '+%Y-%m-%d %H:%M:%S') - WARNING: Service '$service' is already stopped or missing 'start-service.sh'." | tee -a "$LOG_FILE"
            fi
            ;;
        restart)
            if [[ -f "$service_path/start-service.sh" ]]; then
                mv "$service_path/start-service.sh" "$service_path/start-service.bak"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Restarting service '$service'. Waiting $WAIT_TIME seconds..." | tee -a "$LOG_FILE"
                sleep $WAIT_TIME
                mv "$service_path/start-service.bak" "$service_path/start-service.sh"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Restarted service '$service'." | tee -a "$LOG_FILE"
            else
                echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: Cannot restart '$service'. It is already stopped or does not exist." | tee -a "$LOG_FILE"
            fi
            ;;
    esac
}

if [[ $# -lt 2 ]]; then
    usage
fi

ACTION=$1
shift

if [[ "$1" == "all" ]]; then
    for service in "$BASE_DIR"/*/; do
        rename_file "$(basename "$service")" "$ACTION"
    done
else
    for service in "$@"; do
        rename_file "$service" "$ACTION"
    done
fi
