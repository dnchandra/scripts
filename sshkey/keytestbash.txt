#!/bin/bash

# Initialize an array to hold the output data
output=()

# Read and process each line of the authorized_keys file
while IFS= read -r line; do
    # Skip empty lines
    [[ -z "$line" ]] && continue

    # Use awk to parse the line and extract key fields
    key_info=$(echo "$line" | awk '
        {
            num_fields = NF;
            if (num_fields >= 3) {
                comment = $NF;
                ssh_key = $(NF-1);
                key_type = $(NF-2);
                print key_type, ssh_key, comment;
            } else if (num_fields == 2) {
                ssh_key = $1;
                comment = $2;
                print "", ssh_key, comment;
            } else if (num_fields == 1) {
                ssh_key = $1;
                print "", ssh_key, "";
            }
        }
    ')

    # Read the parsed output into variables
    key_type=$(echo "$key_info" | awk '{print $1}')
    ssh_key=$(echo "$key_info" | awk '{print $2}')
    comment=$(echo "$key_info" | awk '{print $3}')

    # Check if the ssh_key contains the key content starting with 'AAAA'
    if [[ "$ssh_key" == AAAA* ]]; then
        # Handle valid keys
        full_ssh_key="${key_type} ${ssh_key}"

        # Determine key strength using ssh-keygen
        key_strength=$(echo "$full_ssh_key" | ssh-keygen -lf /dev/stdin 2>/dev/null | awk '{print $1}')

        # Extract fingerprint using ssh-keygen
        fingerprint=$(echo "$full_ssh_key" | ssh-keygen -E md5 -lf /dev/stdin 2>/dev/null | awk '{print $2}')

        if [[ -n "$key_strength" && -n "$fingerprint" ]]; then
            # Valid key
            output+=("Key Type: $key_type")
            output+=("Key Content: $ssh_key")
            output+=("Key Strength: $key_strength")
            output+=("Fingerprint: $fingerprint")
            output+=("Comment: $comment")
            output+=("---")
        else
            # Invalid key format
            output+=("Invalid Format Key: $ssh_key")
            output+=("Key Content: $ssh_key")
            output+=("Fingerprint: $fingerprint")
            output+=("Comment: $comment")
            output+=("---")
        fi
    else
        # Handle invalid keys
        if [[ "$line" == AAAA* ]]; then
            # Extract key and comment for invalid keys with more than one field
            key_info=$(echo "$line" | awk '
                {
                    num_fields = NF;
                    if (num_fields >= 2) {
                        comment = $NF;
                        ssh_key = $(NF-1);
                        print ssh_key, comment;
                    } else {
                        print $1, "";
                    }
                }
            ')

            ssh_key=$(echo "$key_info" | awk '{print $1}')
            comment=$(echo "$key_info" | awk '{print $2}')

            # Determine key type and prepend accordingly
            if [[ "$ssh_key" == AAAAB* ]]; then
                full_ssh_key="ssh-rsa ${ssh_key}"
            elif [[ "$ssh_key" == AAAAC* ]]; then
                full_ssh_key="ssh-ed25519 ${ssh_key}"
            else
                full_ssh_key="$ssh_key"
            fi

            # Calculate key strength and fingerprint
            key_strength=$(echo "$full_ssh_key" | ssh-keygen -lf /dev/stdin 2>/dev/null | awk '{print $1}')
            fingerprint=$(echo "$full_ssh_key" | ssh-keygen -E md5 -lf /dev/stdin 2>/dev/null | awk '{print $2}')
        else
            # For lines that do not start with 'AAAA', use the original line as key content
            ssh_key="$line"
            comment=""
            key_strength=""
            fingerprint=""
        fi

        # Output for invalid key
        output+=("Invalid Key")
        output+=("Key Content: $ssh_key")
        output+=("Fingerprint: $fingerprint")
        output+=("Comment: $comment")
        output+=("---")
    fi
done < ~/.ssh/authorized_keys

# Print the output
for line in "${output[@]}"; do
    echo "$line"
done
