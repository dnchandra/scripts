<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Custom JIRA Dashboard Generator</title>
  <style>
    /* CSS for styling (your existing styles) */
    /* Add any custom styles here */
     /* CSS for styling */
     body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 20px;
    }

    .form-row {
      display: flex;
      align-items: center;
    }

    .form-group {
      margin-right: 20px;
    }

    label {
      display: block;
      margin-bottom: 5px;
    }

    input[type="text"],
    input[type="date"],
    textarea {
      width: 100%;
      padding: 8px;
      border-radius: 5px;
      border: 1px solid #ccc;
      margin-bottom: 10px;
    }

    .btn {
      padding: 10px 20px;
      background-color: #007bff;
      color: #fff;
      border: none;
      cursor: pointer;
      border-radius: 5px;
      margin-left: 10px;
    }

    .btn:hover {
      background-color: #0056b3;
    }

    /* Table styles */
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 8px;
      border: 1px solid #ccc;
    }

    th {
      background-color: #f2f2f2;
    }

    .error-message {
      color: red;
      margin-top: 10px;
    }

  </style>
</head>
<body>
  <h1>Custom JIRA Dashboard Generator</h1>
  <div class="form-row">
    <!-- JIRA Keys and Date Range -->
    <div class="form-group">
      <label for="jiraKeys">JIRA Keys (Comma-separated):</label>
      <input type="text" id="jiraKeys" name="jira_keys" placeholder="Enter JIRA keys">
    </div>
    <div class="form-group">
      <label for="startDate">Start Date:</label>
      <input type="date" id="startDate" name="start_date">
    </div>
    <div class="form-group">
      <label for="endDate">End Date:</label>
      <input type="date" id="endDate" name="end_date">
    </div>
    <button type="button" class="btn" id="getIssuesBtn">Get Issues Details</button>
    <button type="button" class="btn" id="generateDashboardBtn">Generate Management Dashboard</button>
  </div>

  <!-- OR Text -->
  <div>
    <p>(OR)</p>
  </div>

  <!-- JQL Query -->
  <div>
    <form id="jqlForm">
      <label for="jqlQuery">JQL Query:</label>
      <textarea id="jqlQuery" name="jql" rows="5"></textarea>
      <button type="button" class="btn" id="executeJqlBtn">Execute JQL</button>
    </form>
  </div>

  <div id="dashboardContainer"></div>

  <script>
    document.getElementById('getIssuesBtn').addEventListener('click', function() {
      clearDashboardContainer(); // Clear previous content
      fetchIssues();
    });

    document.getElementById('generateDashboardBtn').addEventListener('click', function() {
      clearDashboardContainer(); // Clear previous content
      fetchDashboardData();
    });

    document.getElementById('executeJqlBtn').addEventListener('click', function() {
      clearDashboardContainer(); // Clear previous content
      executeJqlQuery();
    });

    function fetchIssues() {
      const jiraKeys = document.getElementById('jiraKeys').value.toUpperCase().split(',');
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;

      // Perform client-side validations
      if (!jiraKeys.every(key => key.trim())) {
        alert('Please enter valid JIRA keys.');
        return;
      }
      if (!startDate || !endDate) {
        alert('Please enter both start and end dates.');
        return;
      }
      if (new Date(startDate) > new Date(endDate)) {
        alert('Start date should be before the end date.');
        return;
      }

      const formData = new FormData();
      formData.append('jira_keys', jiraKeys.join(','));
      formData.append('start_date', startDate);
      formData.append('end_date', endDate);

      fetch('/get_issues', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.error) {
          // Display custom error message
          alert(`Error: ${data.error}`);
        } else {
          issuesDetails(data.issues_data, jiraKeys);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        // Display custom error message for network errors
        alert('Please Enter Valid JIRA Key....An error occurred while fetching issues data.');
      });
    }

    function fetchDashboardData() {
      const jiraKeys = document.getElementById('jiraKeys').value.toUpperCase().split(',');
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;

      // Perform client-side validations
      if (!jiraKeys.every(key => key.trim())) {
        alert('Please enter valid JIRA keys.');
        return;
      }
      if (!startDate || !endDate) {
        alert('Please enter both start and end dates.');
        return;
      }
      if (new Date(startDate) > new Date(endDate)) {
        alert('Start date should be before the end date.');
        return;
      }

      const formData = new FormData();
      formData.append('jira_keys', jiraKeys.join(','));
      formData.append('start_date', startDate);
      formData.append('end_date', endDate);

      fetch('/generate_dashboard', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.error) {
          // Display custom error message
          alert(`Error: ${data.error}`);
        } else {
          generateDashboardHtml(data.dashboard_data);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        // Display custom error message for network errors
        alert('Please Enter Valid JIRA Key....An error occurred while fetching issues data.');
      });
    }

    function executeJqlQuery() {
      const jqlQuery = document.getElementById('jqlQuery').value.trim();

      // Perform client-side validations
      if (!jqlQuery) {
        alert('Please enter a valid JQL query.');
        return;
      }

      const formData = new FormData();
      formData.append('jql_query', jqlQuery);

      fetch('/execute_jql', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.error) {
          // Display custom error message
          alert(`Error: ${data.error}`);
        } else {
          executeJqlResults(data.jql_results);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        // Display custom error message for network errors
        alert('An error occurred while executing JQL query.');
      });
    }

    function issuesDetails(issuesData, jiraKeys) {
      const dashboardContainer = document.getElementById('dashboardContainer');

      jiraKeys.forEach(key => {
        const filteredIssues = issuesData.filter(issue => issue.key.startsWith(key));
        if (filteredIssues.length > 0) {
          const header = document.createElement('h2');
          header.textContent = `Issues Details of ${key}`;
          dashboardContainer.appendChild(header);

          const totalCount = filteredIssues.length;
          const totalCountInfo = document.createElement('p');
          totalCountInfo.textContent = `Total Ticket Count: ${totalCount}`;
          dashboardContainer.appendChild(totalCountInfo);

          const table = document.createElement('table');
          table.innerHTML = `
            <thead>
              <tr>
                <th>Key</th>
                <th>Summary</th>
                <th>Status</th>
                <th>Description</th>
                <th>Priority</th>
                <th>Assignee</th>
                <th>Time Spent</th>
                <th>Created Date</th>
                <th>Due Date</th>
                <th>Last Updated</th>
                <th>Resolved Date</th>
                <th>Logged User</th>
              </tr>
            </thead>
            <tbody>
              <!-- Issue details will be added here -->
            </tbody>
          `;
          const tbody = table.querySelector('tbody');
          filteredIssues.forEach(issue => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${issue.key}</td>
              <td>${issue.summary}</td>
              <td>${issue.status}</td>
              <td>${issue.description}</td>
              <td>${issue.priority}</td>
              <td>${issue.assignee}</td>
              <td>${issue.time_spent}</td>
              <td>${issue.created_date}</td>
              <td>${issue.due_date}</td>
              <td>${issue.last_updated}</td>
              <td>${issue.resolved_date}</td>
              <td>${issue.logged_user}</td>
            `;
            tbody.appendChild(row);
          });
          dashboardContainer.appendChild(table);
        }
      });
    }

    function generateDashboardHtml(data) {
      const dashboardContainer = document.getElementById('dashboardContainer');
      dashboardContainer.innerHTML = ''; // Clear previous content

      // Iterate over each project in the dashboard data
      for (const project in data) {
        if (Object.hasOwnProperty.call(data, project)) {
          const assigneeData = data[project];

          // Create a header for the project
          const header = document.createElement('h2');
          header.textContent = `Project: ${project}`;
          dashboardContainer.appendChild(header);

          // Create a table to display assignee data
          const table = document.createElement('table');
          const headerRow = table.insertRow();
          headerRow.innerHTML = `
            <th>Assignee</th>
            <th>Ticket Count</th>
            <th>Time Spent</th>
          `;
          table.appendChild(headerRow);

          // Iterate over each assignee in the project
          for (const assignee in assigneeData) {
            if (Object.hasOwnProperty.call(assigneeData, assignee)) {
              const rowData = assigneeData[assignee];
              const row = table.insertRow();
              row.innerHTML = `
                <td>${assignee}</td>
                <td>${rowData.ticket_count}</td>
                <td>${rowData.time_spent}</td>
              `;
              table.appendChild(row);
            }
          }

          // Append the table to the dashboard container
          dashboardContainer.appendChild(table);
        }
      }
    }

    function executeJqlResults(jqlResults) {
  const dashboardContainer = document.getElementById('dashboardContainer');

  const header = document.createElement('h2');
  header.textContent = 'JQL Query Results';
  dashboardContainer.appendChild(header);

  if (jqlResults && jqlResults.length > 0) {
    const table = document.createElement('table');
    table.innerHTML = `
      <thead>
        <tr>
          <th>Key</th>
          <th>Summary</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- JQL results will be added here -->
      </tbody>
    `;
    const tbody = table.querySelector('tbody');
    jqlResults.forEach(result => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${result.key}</td>
        <td>${result.summary}</td>
        <td>${result.status}</td>
      `;
      tbody.appendChild(row);
    });
    dashboardContainer.appendChild(table);
  } else {
    const errorMessage = document.createElement('p');
    errorMessage.textContent = 'No results found for the given JQL query.';
    dashboardContainer.appendChild(errorMessage);
  }
}

    function clearDashboardContainer() {
      const dashboardContainer = document.getElementById('dashboardContainer');
      dashboardContainer.innerHTML = ''; // Clear previous content
    }

  </script>
</body>
</html>
